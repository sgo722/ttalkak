buildscript {
    ext {
        restdocsApiSpecVersion = '0.18.2'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.epages.restdocs-api-spec' version "${restdocsApiSpecVersion}"
    id "org.asciidoctor.jvm.convert" version "3.3.2"
    id "org.sonarqube" version "4.0.0.2929"
}

configurations {
    asciidoctorExt
}

group = 'kr.kro.ddalkak'
version = '0.0.1'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2023.0.3")
    snippetsDir = file('build/generated-snippets')
}

test {
    outputs.dir snippetsDir
}

openapi3 {
    servers = [
            { url = "https://ttalkak.com" }
    ]
    title = 'TTALKAK API Documentation'
    description = '딸깍 프로젝트 배포 API 문서입니다.'
    version = '0.0.1'
    outputFileNamePrefix = 'ttalkak-project-api-docs'
    format = 'yaml'
    outputDirectory = 'build/resources/test/docs'
}

//bootJar {
//    dependsOn asciidoctor
//    from ("${asciidoctor.outputDir}/html5") {
//        into 'static/docs'
//    }
//}

dependencies {
    // 스프링 웹 의존성
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // 데이터베이스 관련 의존성
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    runtimeOnly 'org.postgresql:postgresql'

    // 스프링 클라우드 의존성
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign"
    implementation 'org.springframework.kafka:spring-kafka'

    // 개발 도구 의존성
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // 테스트 의존성
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // 로그 id 수집
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation('io.micrometer:micrometer-tracing-bridge-brave') {
        // 프로젝트에서 Zipkin을 사용하지 않는 경우
        exclude group: 'io.zipkin.reporter2'
    }

    // logstash와 통신하여 로그를 보내기 위한 설정
    // https://mvnrepository.com/artifact/net.logstash.logback/logstash-logback-encoder
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'
    // https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
    testImplementation 'ch.qos.logback:logback-classic:1.5.7'
    // https://mvnrepository.com/artifact/ch.qos.logback/logback-core
    implementation 'ch.qos.logback:logback-core:1.5.7'
    // https://mvnrepository.com/artifact/ch.qos.logback/logback-access
    implementation 'ch.qos.logback:logback-access:1.5.7'

    // Documentation
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation "com.epages:restdocs-api-spec-mockmvc:${restdocsApiSpecVersion}"

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'com.google.code.gson:gson:2.11.0'
    testImplementation 'org.projectlombok:lombok'

    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
    implementation 'org.elasticsearch.client:elasticsearch-rest-high-level-client:7.9.3'

}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.register('openapi3-security-schemes') {
    dependsOn 'openapi3'
    doFirst {
        def swaggerUIFile = file("${openapi3.outputDirectory}/${openapi3.outputFileNamePrefix}.${openapi3.format}")

        def securitySchemesContent = "  securitySchemes:\n" +         \
                                             "    APIKey:\n" +         \
                                             "      type: apiKey\n" +         \
                                             "      name: Authorization\n" +         \
                                             "      in: header\n" +        \
                                             "security:\n" +
                "  - APIKey: []  # Apply the security scheme here"

        swaggerUIFile.append securitySchemesContent
    }
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}


tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}
//tasks.withType(Test).configureEach {
//    enabled = false
//}

sonarqube {
    properties {
        property "sonar.projectKey", "J11C108"
        property "sonar.projectName", "S11P21C108"
        property "sonar.host.url", "https://sonarqube.ssafy.com"  // SonarQube 서버 URL
        property "sonar.login", "sqp_6ef8b50de151484cdeb6ce20cfc96de0e18b03e1"  // SonarQube 인증 토큰
    }
}

